// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/admin/admin.proto

package admin

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 通用返回结构。
type CommonRsp struct {
	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
	Data *Empty `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (m *CommonRsp) Reset()         { *m = CommonRsp{} }
func (m *CommonRsp) String() string { return proto.CompactTextString(m) }
func (*CommonRsp) ProtoMessage()    {}
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{0}
}
func (m *CommonRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRsp.Merge(m, src)
}
func (m *CommonRsp) XXX_Size() int {
	return m.Size()
}
func (m *CommonRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRsp proto.InternalMessageInfo

func (m *CommonRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CommonRsp) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CommonRsp) GetData() *Empty {
	if m != nil {
		return m.Data
	}
	return nil
}

// 空结构体。
type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// 创建商品品牌请求结构。
type CreateBrandReq struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CoverUrl  string `protobuf:"bytes,2,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	SortOrder int32  `protobuf:"varint,3,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	CreatedBy int64  `protobuf:"varint,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy int64  `protobuf:"varint,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Remark    string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (m *CreateBrandReq) Reset()         { *m = CreateBrandReq{} }
func (m *CreateBrandReq) String() string { return proto.CompactTextString(m) }
func (*CreateBrandReq) ProtoMessage()    {}
func (*CreateBrandReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{2}
}
func (m *CreateBrandReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrandReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrandReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrandReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrandReq.Merge(m, src)
}
func (m *CreateBrandReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrandReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrandReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrandReq proto.InternalMessageInfo

func (m *CreateBrandReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateBrandReq) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *CreateBrandReq) GetSortOrder() int32 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *CreateBrandReq) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *CreateBrandReq) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *CreateBrandReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// 创建商品品牌返回结构。
type CreateBrandRsp struct {
	Code int64            `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Desc string           `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
	Data *CreateBrandData `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (m *CreateBrandRsp) Reset()         { *m = CreateBrandRsp{} }
func (m *CreateBrandRsp) String() string { return proto.CompactTextString(m) }
func (*CreateBrandRsp) ProtoMessage()    {}
func (*CreateBrandRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{3}
}
func (m *CreateBrandRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrandRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrandRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrandRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrandRsp.Merge(m, src)
}
func (m *CreateBrandRsp) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrandRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrandRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrandRsp proto.InternalMessageInfo

func (m *CreateBrandRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateBrandRsp) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CreateBrandRsp) GetData() *CreateBrandData {
	if m != nil {
		return m.Data
	}
	return nil
}

// 创建商品品牌data结构。
type CreateBrandData struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CreateBrandData) Reset()         { *m = CreateBrandData{} }
func (m *CreateBrandData) String() string { return proto.CompactTextString(m) }
func (*CreateBrandData) ProtoMessage()    {}
func (*CreateBrandData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{4}
}
func (m *CreateBrandData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrandData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrandData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrandData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrandData.Merge(m, src)
}
func (m *CreateBrandData) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrandData) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrandData.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrandData proto.InternalMessageInfo

func (m *CreateBrandData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 编辑商品品牌请求结构。
type UpdateBrandReq struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CoverUrl   string `protobuf:"bytes,2,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	SortOrder  int32  `protobuf:"varint,3,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	CreatedBy  int64  `protobuf:"varint,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy  int64  `protobuf:"varint,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Remark     string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	DeleteFlag int32  `protobuf:"varint,7,opt,name=delete_flag,json=deleteFlag,proto3" json:"delete_flag,omitempty"`
}

func (m *UpdateBrandReq) Reset()         { *m = UpdateBrandReq{} }
func (m *UpdateBrandReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBrandReq) ProtoMessage()    {}
func (*UpdateBrandReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{5}
}
func (m *UpdateBrandReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBrandReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBrandReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBrandReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBrandReq.Merge(m, src)
}
func (m *UpdateBrandReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBrandReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBrandReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBrandReq proto.InternalMessageInfo

func (m *UpdateBrandReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateBrandReq) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *UpdateBrandReq) GetSortOrder() int32 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *UpdateBrandReq) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *UpdateBrandReq) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *UpdateBrandReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UpdateBrandReq) GetDeleteFlag() int32 {
	if m != nil {
		return m.DeleteFlag
	}
	return 0
}

type GetBrandByIDReq struct {
	BrandId int64 `protobuf:"varint,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
}

func (m *GetBrandByIDReq) Reset()         { *m = GetBrandByIDReq{} }
func (m *GetBrandByIDReq) String() string { return proto.CompactTextString(m) }
func (*GetBrandByIDReq) ProtoMessage()    {}
func (*GetBrandByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{6}
}
func (m *GetBrandByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrandByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrandByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrandByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrandByIDReq.Merge(m, src)
}
func (m *GetBrandByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBrandByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrandByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrandByIDReq proto.InternalMessageInfo

func (m *GetBrandByIDReq) GetBrandId() int64 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

type GetBrandByIDRsp struct {
	Id          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CoverUrl    string     `protobuf:"bytes,3,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	SortOrder   int32      `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	CreatedBy   int64      `protobuf:"varint,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy   int64      `protobuf:"varint,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Remark      string     `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	DeleteFlag  int32      `protobuf:"varint,8,opt,name=delete_flag,json=deleteFlag,proto3" json:"delete_flag,omitempty"`
	CreatedTime *time.Time `protobuf:"bytes,9,opt,name=created_time,json=createdTime,proto3,stdtime" json:"created_time"`
	UpdatedTime *time.Time `protobuf:"bytes,10,opt,name=updated_time,json=updatedTime,proto3,stdtime" json:"updated_time"`
}

func (m *GetBrandByIDRsp) Reset()         { *m = GetBrandByIDRsp{} }
func (m *GetBrandByIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetBrandByIDRsp) ProtoMessage()    {}
func (*GetBrandByIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{7}
}
func (m *GetBrandByIDRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrandByIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrandByIDRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrandByIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrandByIDRsp.Merge(m, src)
}
func (m *GetBrandByIDRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetBrandByIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrandByIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrandByIDRsp proto.InternalMessageInfo

func (m *GetBrandByIDRsp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetBrandByIDRsp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetBrandByIDRsp) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *GetBrandByIDRsp) GetSortOrder() int32 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *GetBrandByIDRsp) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *GetBrandByIDRsp) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *GetBrandByIDRsp) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *GetBrandByIDRsp) GetDeleteFlag() int32 {
	if m != nil {
		return m.DeleteFlag
	}
	return 0
}

func (m *GetBrandByIDRsp) GetCreatedTime() *time.Time {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *GetBrandByIDRsp) GetUpdatedTime() *time.Time {
	if m != nil {
		return m.UpdatedTime
	}
	return nil
}

type MultiGetBrandReq struct {
	Page      int32      `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32      `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name      string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	StartTime *time.Time `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime   *time.Time `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
}

func (m *MultiGetBrandReq) Reset()         { *m = MultiGetBrandReq{} }
func (m *MultiGetBrandReq) String() string { return proto.CompactTextString(m) }
func (*MultiGetBrandReq) ProtoMessage()    {}
func (*MultiGetBrandReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{8}
}
func (m *MultiGetBrandReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiGetBrandReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiGetBrandReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiGetBrandReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGetBrandReq.Merge(m, src)
}
func (m *MultiGetBrandReq) XXX_Size() int {
	return m.Size()
}
func (m *MultiGetBrandReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGetBrandReq.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGetBrandReq proto.InternalMessageInfo

func (m *MultiGetBrandReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *MultiGetBrandReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *MultiGetBrandReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MultiGetBrandReq) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MultiGetBrandReq) GetEndTime() *time.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type MultiGetBrandRsp struct {
	Code int64              `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Desc string             `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
	Data *MultiGetBrandData `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (m *MultiGetBrandRsp) Reset()         { *m = MultiGetBrandRsp{} }
func (m *MultiGetBrandRsp) String() string { return proto.CompactTextString(m) }
func (*MultiGetBrandRsp) ProtoMessage()    {}
func (*MultiGetBrandRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{9}
}
func (m *MultiGetBrandRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiGetBrandRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiGetBrandRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiGetBrandRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGetBrandRsp.Merge(m, src)
}
func (m *MultiGetBrandRsp) XXX_Size() int {
	return m.Size()
}
func (m *MultiGetBrandRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGetBrandRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGetBrandRsp proto.InternalMessageInfo

func (m *MultiGetBrandRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MultiGetBrandRsp) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MultiGetBrandRsp) GetData() *MultiGetBrandData {
	if m != nil {
		return m.Data
	}
	return nil
}

type MultiGetBrandData struct {
	List  []*MultiGetBrandContent `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (m *MultiGetBrandData) Reset()         { *m = MultiGetBrandData{} }
func (m *MultiGetBrandData) String() string { return proto.CompactTextString(m) }
func (*MultiGetBrandData) ProtoMessage()    {}
func (*MultiGetBrandData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{10}
}
func (m *MultiGetBrandData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiGetBrandData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiGetBrandData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiGetBrandData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGetBrandData.Merge(m, src)
}
func (m *MultiGetBrandData) XXX_Size() int {
	return m.Size()
}
func (m *MultiGetBrandData) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGetBrandData.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGetBrandData proto.InternalMessageInfo

func (m *MultiGetBrandData) GetList() []*MultiGetBrandContent {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *MultiGetBrandData) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type MultiGetBrandContent struct {
	Id          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CoverUrl    string     `protobuf:"bytes,3,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	SortOrder   int32      `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	CreatedBy   int64      `protobuf:"varint,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy   int64      `protobuf:"varint,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Remark      string     `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	DeleteFlag  int32      `protobuf:"varint,8,opt,name=delete_flag,json=deleteFlag,proto3" json:"delete_flag,omitempty"`
	CreatedTime *time.Time `protobuf:"bytes,9,opt,name=created_time,json=createdTime,proto3,stdtime" json:"created_time"`
	UpdatedTime *time.Time `protobuf:"bytes,10,opt,name=updated_time,json=updatedTime,proto3,stdtime" json:"updated_time"`
}

func (m *MultiGetBrandContent) Reset()         { *m = MultiGetBrandContent{} }
func (m *MultiGetBrandContent) String() string { return proto.CompactTextString(m) }
func (*MultiGetBrandContent) ProtoMessage()    {}
func (*MultiGetBrandContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{11}
}
func (m *MultiGetBrandContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiGetBrandContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiGetBrandContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiGetBrandContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGetBrandContent.Merge(m, src)
}
func (m *MultiGetBrandContent) XXX_Size() int {
	return m.Size()
}
func (m *MultiGetBrandContent) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGetBrandContent.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGetBrandContent proto.InternalMessageInfo

func (m *MultiGetBrandContent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MultiGetBrandContent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MultiGetBrandContent) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *MultiGetBrandContent) GetSortOrder() int32 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *MultiGetBrandContent) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *MultiGetBrandContent) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *MultiGetBrandContent) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *MultiGetBrandContent) GetDeleteFlag() int32 {
	if m != nil {
		return m.DeleteFlag
	}
	return 0
}

func (m *MultiGetBrandContent) GetCreatedTime() *time.Time {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *MultiGetBrandContent) GetUpdatedTime() *time.Time {
	if m != nil {
		return m.UpdatedTime
	}
	return nil
}

type RemoveBrandReq struct {
	BrandId int64 `protobuf:"varint,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
}

func (m *RemoveBrandReq) Reset()         { *m = RemoveBrandReq{} }
func (m *RemoveBrandReq) String() string { return proto.CompactTextString(m) }
func (*RemoveBrandReq) ProtoMessage()    {}
func (*RemoveBrandReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efe4c047dd1dffd, []int{12}
}
func (m *RemoveBrandReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBrandReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBrandReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveBrandReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBrandReq.Merge(m, src)
}
func (m *RemoveBrandReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveBrandReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBrandReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBrandReq proto.InternalMessageInfo

func (m *RemoveBrandReq) GetBrandId() int64 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func init() {
	proto.RegisterType((*CommonRsp)(nil), "admin.CommonRsp")
	proto.RegisterType((*Empty)(nil), "admin.Empty")
	proto.RegisterType((*CreateBrandReq)(nil), "admin.CreateBrandReq")
	proto.RegisterType((*CreateBrandRsp)(nil), "admin.CreateBrandRsp")
	proto.RegisterType((*CreateBrandData)(nil), "admin.CreateBrandData")
	proto.RegisterType((*UpdateBrandReq)(nil), "admin.UpdateBrandReq")
	proto.RegisterType((*GetBrandByIDReq)(nil), "admin.GetBrandByIDReq")
	proto.RegisterType((*GetBrandByIDRsp)(nil), "admin.GetBrandByIDRsp")
	proto.RegisterType((*MultiGetBrandReq)(nil), "admin.MultiGetBrandReq")
	proto.RegisterType((*MultiGetBrandRsp)(nil), "admin.MultiGetBrandRsp")
	proto.RegisterType((*MultiGetBrandData)(nil), "admin.MultiGetBrandData")
	proto.RegisterType((*MultiGetBrandContent)(nil), "admin.MultiGetBrandContent")
	proto.RegisterType((*RemoveBrandReq)(nil), "admin.RemoveBrandReq")
}

func init() { proto.RegisterFile("proto/admin/admin.proto", fileDescriptor_2efe4c047dd1dffd) }

var fileDescriptor_2efe4c047dd1dffd = []byte{
	// 1007 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x8f, 0xdb, 0xc4,
	0x17, 0x5f, 0xe7, 0xc7, 0x26, 0x9e, 0xec, 0x77, 0xbb, 0xdf, 0x51, 0x69, 0xa3, 0x74, 0x37, 0xce,
	0xba, 0xa2, 0x84, 0x95, 0x6a, 0xd3, 0xdd, 0x15, 0x12, 0x45, 0x48, 0xc5, 0x5b, 0xa8, 0x7a, 0xa8,
	0x90, 0x5c, 0x2a, 0x21, 0x2e, 0xd1, 0x24, 0x9e, 0x35, 0xd6, 0xda, 0x1e, 0xd7, 0x9e, 0xa4, 0xa4,
	0x88, 0x4b, 0x0f, 0x1c, 0x38, 0xad, 0xe0, 0xc0, 0xbf, 0xc4, 0xb1, 0x12, 0x17, 0x4e, 0x59, 0x94,
	0xe5, 0x94, 0x0b, 0x7f, 0x02, 0x68, 0xde, 0xd8, 0x89, 0x9d, 0xcd, 0x6a, 0x91, 0x7a, 0xe0, 0x00,
	0x97, 0x49, 0xe6, 0x7d, 0xde, 0xbc, 0xcf, 0x9b, 0xcf, 0xcc, 0xbc, 0x67, 0x74, 0x33, 0x8a, 0x19,
	0x67, 0x26, 0x71, 0x02, 0x2f, 0x94, 0xa3, 0x01, 0x16, 0x5c, 0x85, 0x49, 0xeb, 0xd0, 0xf5, 0xf8,
	0x57, 0xc3, 0xbe, 0x31, 0x60, 0x81, 0xe9, 0x32, 0x97, 0x99, 0x80, 0xf6, 0x87, 0xc7, 0x0f, 0x46,
	0xf7, 0x8c, 0x03, 0x63, 0x1f, 0x8c, 0x32, 0x86, 0xf8, 0x27, 0x17, 0xb7, 0x3e, 0xca, 0xad, 0x0a,
	0x5e, 0x78, 0xfc, 0x84, 0xbd, 0x30, 0x5d, 0x76, 0x17, 0xc0, 0xbb, 0x23, 0xe2, 0x7b, 0x0e, 0xe1,
	0x2c, 0x4e, 0x1e, 0x8c, 0xde, 0x83, 0x18, 0x73, 0x4b, 0xba, 0x7c, 0xdb, 0x65, 0xcc, 0xf5, 0xa9,
	0x49, 0x22, 0xcf, 0x24, 0x61, 0xc8, 0x38, 0xe1, 0x1e, 0x0b, 0x93, 0x14, 0xd5, 0x52, 0x34, 0xcb,
	0xc4, 0xe4, 0x5e, 0x40, 0x13, 0x4e, 0x82, 0x48, 0x3a, 0xe8, 0x09, 0x52, 0x8f, 0x58, 0x10, 0xb0,
	0xd0, 0x4e, 0x22, 0xbc, 0x8d, 0x2a, 0x03, 0xe6, 0xd0, 0xa6, 0xd2, 0x51, 0xba, 0x65, 0xab, 0x3e,
	0x9b, 0x68, 0x30, 0xb7, 0x61, 0x14, 0xa8, 0x43, 0x93, 0x41, 0xb3, 0xd4, 0x51, 0xba, 0xaa, 0x44,
	0xc5, 0xdc, 0x86, 0x11, 0xef, 0xa1, 0x8a, 0x43, 0x38, 0x69, 0x96, 0x3b, 0x4a, 0xb7, 0xb1, 0xbf,
	0x61, 0x48, 0x7d, 0x3e, 0x09, 0x22, 0x3e, 0x4e, 0x7d, 0x09, 0x27, 0x36, 0x8c, 0x7a, 0x0d, 0x55,
	0x01, 0xd0, 0xff, 0x50, 0xd0, 0xe6, 0x51, 0x4c, 0x09, 0xa7, 0x56, 0x4c, 0x42, 0xc7, 0xa6, 0xcf,
	0xf1, 0x0e, 0xaa, 0x84, 0x24, 0x90, 0x39, 0xa8, 0x96, 0x3a, 0x3d, 0xd3, 0xaa, 0x5f, 0x28, 0x5f,
	0xff, 0xa9, 0xd8, 0x60, 0xc6, 0x77, 0x90, 0x3a, 0x60, 0x23, 0x1a, 0xf7, 0x86, 0xb1, 0x9f, 0x66,
	0x92, 0xf3, 0xa9, 0x03, 0xf6, 0x2c, 0xf6, 0xf1, 0xdb, 0x08, 0x25, 0x2c, 0xe6, 0x3d, 0x16, 0x3b,
	0x34, 0x86, 0xa4, 0xaa, 0xd6, 0xfa, 0xf4, 0x4c, 0x2b, 0x6d, 0xad, 0xd9, 0xaa, 0x40, 0x3e, 0x13,
	0x80, 0x70, 0x1b, 0x00, 0xbf, 0xd3, 0xeb, 0x8f, 0x9b, 0x15, 0xd8, 0xf7, 0xdc, 0x2d, 0x45, 0xac,
	0xb1, 0x70, 0x1b, 0x46, 0x4e, 0xe6, 0x56, 0x2d, 0xba, 0xa5, 0x88, 0x35, 0xc6, 0xbb, 0x68, 0x3d,
	0xa6, 0x01, 0x89, 0x4f, 0x9a, 0xeb, 0xcb, 0x99, 0xa5, 0x80, 0xfe, 0x6a, 0x69, 0xc7, 0x6f, 0xa8,
	0xfa, 0x61, 0x41, 0xf5, 0x1b, 0xa9, 0xea, 0x39, 0x82, 0x87, 0x84, 0x93, 0x0b, 0xfa, 0xef, 0xa2,
	0x6b, 0x4b, 0x2e, 0x78, 0x13, 0x95, 0x3c, 0x47, 0xa6, 0x60, 0x97, 0x3c, 0x47, 0x3f, 0x2d, 0xa1,
	0xcd, 0x67, 0xb0, 0xb1, 0x7f, 0xc9, 0xc9, 0x60, 0x0d, 0x35, 0x1c, 0xea, 0x53, 0x4e, 0x7b, 0xc7,
	0x3e, 0x71, 0x9b, 0x35, 0x91, 0x98, 0x8d, 0xa4, 0xe9, 0x53, 0x9f, 0xb8, 0xfa, 0x21, 0xba, 0xf6,
	0x88, 0x72, 0x90, 0xc3, 0x1a, 0x3f, 0x7e, 0x28, 0x24, 0xd9, 0x45, 0xf5, 0xbe, 0x98, 0xf7, 0x32,
	0xed, 0xe6, 0xdc, 0x35, 0xb0, 0x3f, 0x76, 0xf4, 0x1f, 0xca, 0x4b, 0xcb, 0x92, 0x68, 0x59, 0x6c,
	0x8c, 0x53, 0x65, 0x41, 0xb5, 0x54, 0xce, 0x5b, 0x79, 0x39, 0xcb, 0x00, 0x2c, 0x34, 0xdc, 0x29,
	0x68, 0x58, 0x81, 0x54, 0x73, 0xda, 0xed, 0x14, 0xb4, 0x03, 0x51, 0xf2, 0x9a, 0xed, 0x14, 0x34,
	0x5b, 0x97, 0xf0, 0x42, 0xab, 0x1b, 0x73, 0xad, 0x6a, 0x40, 0x7b, 0x89, 0x40, 0xf5, 0x65, 0x81,
	0xf0, 0x53, 0xb4, 0x91, 0xd1, 0x8a, 0x32, 0xd3, 0x54, 0xe1, 0x52, 0xb6, 0x0c, 0x59, 0x83, 0x8c,
	0xac, 0x06, 0x19, 0x9f, 0x67, 0x35, 0xc8, 0xba, 0x3e, 0x9b, 0x68, 0x85, 0x35, 0xa7, 0x67, 0x9a,
	0x62, 0x37, 0x52, 0x8b, 0xf0, 0x13, 0x41, 0xb3, 0x64, 0x21, 0x28, 0xfa, 0x7b, 0x41, 0xf3, 0x6b,
	0x64, 0xd0, 0xd4, 0x22, 0xfc, 0xf4, 0xef, 0x4b, 0x68, 0xeb, 0xc9, 0xd0, 0xe7, 0x5e, 0x76, 0x32,
	0xe2, 0x30, 0x5b, 0xa8, 0x12, 0x11, 0x57, 0xde, 0xef, 0xc5, 0x95, 0x04, 0x1b, 0xbe, 0x8d, 0x54,
	0xf1, 0xdb, 0x4b, 0xbc, 0x97, 0xf2, 0x98, 0x16, 0x0e, 0x75, 0x01, 0x3c, 0xf5, 0x5e, 0xd2, 0xf9,
	0x03, 0x29, 0xaf, 0x7e, 0x20, 0x4f, 0x10, 0x4a, 0x38, 0x89, 0xb9, 0xdc, 0x47, 0xe5, 0xca, 0x7d,
	0xe0, 0xd9, 0x44, 0xcb, 0xad, 0x80, 0x5d, 0xa8, 0x30, 0x07, 0x61, 0x1e, 0xa1, 0x3a, 0x0d, 0x53,
	0x51, 0xaa, 0x57, 0x06, 0xdb, 0x9a, 0x4d, 0xb4, 0xb9, 0x3f, 0x84, 0xaa, 0xd1, 0x50, 0x8a, 0xf1,
	0x9d, 0xb2, 0x2c, 0xc6, 0x1b, 0x16, 0xa5, 0xf7, 0x0b, 0x45, 0xa9, 0x99, 0x16, 0xa5, 0x02, 0xc5,
	0xca, 0xb2, 0xc4, 0xd0, 0xff, 0x2f, 0x38, 0xe1, 0x0f, 0x50, 0xc5, 0xf7, 0x12, 0xde, 0x54, 0x3a,
	0xe5, 0x6e, 0x63, 0xff, 0xd6, 0xaa, 0x60, 0x47, 0x2c, 0xe4, 0x34, 0xe4, 0x32, 0x9e, 0x70, 0xb6,
	0x61, 0xc4, 0x1a, 0xaa, 0x72, 0xc6, 0x89, 0xac, 0x46, 0x65, 0x4b, 0x9d, 0x4d, 0x34, 0x69, 0xb0,
	0xe5, 0x8f, 0xfe, 0x53, 0x19, 0x5d, 0x5f, 0x15, 0xe9, 0xbf, 0x07, 0xfa, 0x4f, 0x3f, 0xd0, 0x03,
	0xb4, 0x69, 0xd3, 0x80, 0x8d, 0x16, 0xdd, 0xe7, 0xea, 0x52, 0xbb, 0x7f, 0x5a, 0x41, 0xd5, 0x8f,
	0xc5, 0xf5, 0xc0, 0xc7, 0xa8, 0x91, 0x6b, 0x70, 0xf8, 0xad, 0x8b, 0x7d, 0xd1, 0xa6, 0xcf, 0x5b,
	0xab, 0xcc, 0x49, 0xa4, 0xbf, 0xfb, 0xea, 0x97, 0xdf, 0x7f, 0x2c, 0xdd, 0xd6, 0xdb, 0xe6, 0xe8,
	0x5e, 0xfa, 0xb1, 0x27, 0x99, 0x03, 0x12, 0x12, 0x97, 0xc6, 0xa6, 0xdc, 0xfd, 0x7d, 0x65, 0x0f,
	0xf7, 0x50, 0x23, 0xd7, 0x24, 0xe7, 0x3c, 0xc5, 0xc6, 0xd9, 0xda, 0xca, 0x78, 0xb2, 0x0f, 0x2d,
	0xfd, 0x1d, 0xa0, 0xd8, 0xd5, 0xb7, 0x2f, 0xa3, 0xa0, 0x8e, 0xc7, 0x05, 0x41, 0x88, 0x36, 0xf2,
	0xcd, 0x03, 0x67, 0x1d, 0x7e, 0xa9, 0x11, 0xb5, 0x56, 0xda, 0x93, 0x48, 0x37, 0x80, 0xa8, 0x8b,
	0xef, 0x5c, 0x46, 0xe4, 0x52, 0x6e, 0x7e, 0x93, 0x09, 0xfb, 0x2d, 0x3e, 0x41, 0xff, 0x2b, 0x3c,
	0x08, 0x7c, 0x73, 0xd5, 0x83, 0x13, 0x8c, 0xab, 0x81, 0x24, 0xd2, 0xbb, 0x40, 0xa9, 0xe3, 0xce,
	0x65, 0x94, 0xfd, 0xa1, 0x7f, 0xd2, 0x73, 0x29, 0xc7, 0x04, 0x35, 0x72, 0x87, 0x3c, 0x57, 0xaf,
	0x78, 0xf0, 0x2b, 0xd4, 0xbb, 0xf2, 0x80, 0x62, 0x88, 0x70, 0x5f, 0xd9, 0xb3, 0xf4, 0x9f, 0xa7,
	0x6d, 0xe5, 0xf5, 0xb4, 0xad, 0xfc, 0x36, 0x6d, 0x2b, 0xa7, 0xe7, 0xed, 0xb5, 0xd7, 0xe7, 0xed,
	0xb5, 0x5f, 0xcf, 0xdb, 0x6b, 0x5f, 0xd6, 0x0d, 0xf3, 0x43, 0x58, 0xdb, 0x5f, 0x87, 0x2b, 0x7a,
	0xf0, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x6e, 0xc2, 0x44, 0xdf, 0x0b, 0x00, 0x00,
}

func (m *CommonRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateBrandReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrandReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrandReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x32
	}
	if m.UpdatedBy != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.UpdatedBy))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedBy != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x20
	}
	if m.SortOrder != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.SortOrder))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrandRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrandRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrandRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrandData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrandData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrandData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBrandReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBrandReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBrandReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeleteFlag != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.DeleteFlag))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x32
	}
	if m.UpdatedBy != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.UpdatedBy))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedBy != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x20
	}
	if m.SortOrder != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.SortOrder))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBrandByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrandByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrandByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.BrandId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBrandByIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrandByIDRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrandByIDRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintAdmin(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedTime != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintAdmin(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x4a
	}
	if m.DeleteFlag != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.DeleteFlag))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdatedBy != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.UpdatedBy))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedBy != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x28
	}
	if m.SortOrder != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.SortOrder))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiGetBrandReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiGetBrandReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiGetBrandReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintAdmin(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x2a
	}
	if m.StartTime != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintAdmin(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiGetBrandRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiGetBrandRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiGetBrandRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiGetBrandData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiGetBrandData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiGetBrandData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdmin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MultiGetBrandContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiGetBrandContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiGetBrandContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedTime != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedTime):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintAdmin(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedTime != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedTime):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintAdmin(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x4a
	}
	if m.DeleteFlag != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.DeleteFlag))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdatedBy != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.UpdatedBy))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedBy != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x28
	}
	if m.SortOrder != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.SortOrder))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveBrandReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBrandReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveBrandReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.BrandId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdmin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAdmin(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateBrandReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.SortOrder != 0 {
		n += 1 + sovAdmin(uint64(m.SortOrder))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovAdmin(uint64(m.CreatedBy))
	}
	if m.UpdatedBy != 0 {
		n += 1 + sovAdmin(uint64(m.UpdatedBy))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *CreateBrandRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAdmin(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *CreateBrandData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAdmin(uint64(m.Id))
	}
	return n
}

func (m *UpdateBrandReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.SortOrder != 0 {
		n += 1 + sovAdmin(uint64(m.SortOrder))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovAdmin(uint64(m.CreatedBy))
	}
	if m.UpdatedBy != 0 {
		n += 1 + sovAdmin(uint64(m.UpdatedBy))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.DeleteFlag != 0 {
		n += 1 + sovAdmin(uint64(m.DeleteFlag))
	}
	return n
}

func (m *GetBrandByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovAdmin(uint64(m.BrandId))
	}
	return n
}

func (m *GetBrandByIDRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAdmin(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.SortOrder != 0 {
		n += 1 + sovAdmin(uint64(m.SortOrder))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovAdmin(uint64(m.CreatedBy))
	}
	if m.UpdatedBy != 0 {
		n += 1 + sovAdmin(uint64(m.UpdatedBy))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.DeleteFlag != 0 {
		n += 1 + sovAdmin(uint64(m.DeleteFlag))
	}
	if m.CreatedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedTime)
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.UpdatedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedTime)
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *MultiGetBrandReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAdmin(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAdmin(uint64(m.PageSize))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.EndTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime)
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *MultiGetBrandRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAdmin(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *MultiGetBrandData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovAdmin(uint64(m.Total))
	}
	return n
}

func (m *MultiGetBrandContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAdmin(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.SortOrder != 0 {
		n += 1 + sovAdmin(uint64(m.SortOrder))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovAdmin(uint64(m.CreatedBy))
	}
	if m.UpdatedBy != 0 {
		n += 1 + sovAdmin(uint64(m.UpdatedBy))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.DeleteFlag != 0 {
		n += 1 + sovAdmin(uint64(m.DeleteFlag))
	}
	if m.CreatedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedTime)
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.UpdatedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedTime)
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *RemoveBrandReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandId != 0 {
		n += 1 + sovAdmin(uint64(m.BrandId))
	}
	return n
}

func sovAdmin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Empty{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrandReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrandReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrandReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			m.SortOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			m.UpdatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrandRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrandRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrandRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CreateBrandData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrandData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrandData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrandData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBrandReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBrandReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBrandReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			m.SortOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			m.UpdatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteFlag", wireType)
			}
			m.DeleteFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrandByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrandByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrandByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrandByIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrandByIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrandByIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			m.SortOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			m.UpdatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteFlag", wireType)
			}
			m.DeleteFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedTime == nil {
				m.UpdatedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiGetBrandReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiGetBrandReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiGetBrandReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiGetBrandRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiGetBrandRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiGetBrandRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &MultiGetBrandData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiGetBrandData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiGetBrandData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiGetBrandData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MultiGetBrandContent{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiGetBrandContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiGetBrandContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiGetBrandContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			m.SortOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			m.UpdatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteFlag", wireType)
			}
			m.DeleteFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedTime == nil {
				m.UpdatedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBrandReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBrandReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBrandReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdmin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdmin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdmin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdmin = fmt.Errorf("proto: unexpected end of group")
)
