// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/admin/admin.proto

package admin

import (
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/timestamppb"

	context "context"

	client "github.com/micro/go-micro/client"

	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Admin service

type AdminClient interface {
	// 创建发行方商品.
	CreateBrand(ctx context.Context, in *CreateBrandReq, opts ...client.CallOption) (*CreateBrandRsp, error)
	// 编辑发行方商品.
	UpdateBrand(ctx context.Context, in *UpdateBrandReq, opts ...client.CallOption) (*CommonRsp, error)
	// 基于发行方商品ID查询发行方商品详情.
	GetBrandByID(ctx context.Context, in *GetBrandByIDReq, opts ...client.CallOption) (*GetBrandByIDRsp, error)
	// 批量查询发行方商品数据.
	MultiGetBrand(ctx context.Context, in *MultiGetBrandReq, opts ...client.CallOption) (*MultiGetBrandRsp, error)
	// 删除发行方商品.
	RemoveBrand(ctx context.Context, in *RemoveBrandReq, opts ...client.CallOption) (*CommonRsp, error)
}

type adminClient struct {
	c    client.Client
	name string
}

func NewAdminClient(name string, c client.Client) AdminClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "admin"
	}
	return &adminClient{
		c:    c,
		name: name,
	}
}

func (c *adminClient) CreateBrand(ctx context.Context, in *CreateBrandReq, opts ...client.CallOption) (*CreateBrandRsp, error) {
	req := c.c.NewRequest(c.name, "Admin.CreateBrand", in)
	out := new(CreateBrandRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateBrand(ctx context.Context, in *UpdateBrandReq, opts ...client.CallOption) (*CommonRsp, error) {
	req := c.c.NewRequest(c.name, "Admin.UpdateBrand", in)
	out := new(CommonRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBrandByID(ctx context.Context, in *GetBrandByIDReq, opts ...client.CallOption) (*GetBrandByIDRsp, error) {
	req := c.c.NewRequest(c.name, "Admin.GetBrandByID", in)
	out := new(GetBrandByIDRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MultiGetBrand(ctx context.Context, in *MultiGetBrandReq, opts ...client.CallOption) (*MultiGetBrandRsp, error) {
	req := c.c.NewRequest(c.name, "Admin.MultiGetBrand", in)
	out := new(MultiGetBrandRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RemoveBrand(ctx context.Context, in *RemoveBrandReq, opts ...client.CallOption) (*CommonRsp, error) {
	req := c.c.NewRequest(c.name, "Admin.RemoveBrand", in)
	out := new(CommonRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminHandler interface {
	// 创建发行方商品.
	CreateBrand(context.Context, *CreateBrandReq, *CreateBrandRsp) error
	// 编辑发行方商品.
	UpdateBrand(context.Context, *UpdateBrandReq, *CommonRsp) error
	// 基于发行方商品ID查询发行方商品详情.
	GetBrandByID(context.Context, *GetBrandByIDReq, *GetBrandByIDRsp) error
	// 批量查询发行方商品数据.
	MultiGetBrand(context.Context, *MultiGetBrandReq, *MultiGetBrandRsp) error
	// 删除发行方商品.
	RemoveBrand(context.Context, *RemoveBrandReq, *CommonRsp) error
}

func RegisterAdminHandler(s server.Server, hdlr AdminHandler, opts ...server.HandlerOption) error {
	type admin interface {
		CreateBrand(ctx context.Context, in *CreateBrandReq, out *CreateBrandRsp) error
		UpdateBrand(ctx context.Context, in *UpdateBrandReq, out *CommonRsp) error
		GetBrandByID(ctx context.Context, in *GetBrandByIDReq, out *GetBrandByIDRsp) error
		MultiGetBrand(ctx context.Context, in *MultiGetBrandReq, out *MultiGetBrandRsp) error
		RemoveBrand(ctx context.Context, in *RemoveBrandReq, out *CommonRsp) error
	}
	type Admin struct {
		admin
	}
	h := &adminHandler{hdlr}
	return s.Handle(s.NewHandler(&Admin{h}, opts...))
}

type adminHandler struct {
	AdminHandler
}

func (h *adminHandler) CreateBrand(ctx context.Context, in *CreateBrandReq, out *CreateBrandRsp) error {
	return h.AdminHandler.CreateBrand(ctx, in, out)
}

func (h *adminHandler) UpdateBrand(ctx context.Context, in *UpdateBrandReq, out *CommonRsp) error {
	return h.AdminHandler.UpdateBrand(ctx, in, out)
}

func (h *adminHandler) GetBrandByID(ctx context.Context, in *GetBrandByIDReq, out *GetBrandByIDRsp) error {
	return h.AdminHandler.GetBrandByID(ctx, in, out)
}

func (h *adminHandler) MultiGetBrand(ctx context.Context, in *MultiGetBrandReq, out *MultiGetBrandRsp) error {
	return h.AdminHandler.MultiGetBrand(ctx, in, out)
}

func (h *adminHandler) RemoveBrand(ctx context.Context, in *RemoveBrandReq, out *CommonRsp) error {
	return h.AdminHandler.RemoveBrand(ctx, in, out)
}
