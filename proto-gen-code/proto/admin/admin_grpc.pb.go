// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/admin/admin.proto

package admin

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// 创建发行方商品.
	CreateBrand(ctx context.Context, in *CreateBrandReq, opts ...grpc.CallOption) (*CreateBrandRsp, error)
	// 编辑发行方商品.
	UpdateBrand(ctx context.Context, in *UpdateBrandReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// 基于发行方商品ID查询发行方商品详情.
	GetBrandByID(ctx context.Context, in *GetBrandByIDReq, opts ...grpc.CallOption) (*GetBrandByIDRsp, error)
	// 批量查询发行方商品数据.
	MultiGetBrand(ctx context.Context, in *MultiGetBrandReq, opts ...grpc.CallOption) (*MultiGetBrandRsp, error)
	// 删除发行方商品.
	RemoveBrand(ctx context.Context, in *RemoveBrandReq, opts ...grpc.CallOption) (*CommonRsp, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) CreateBrand(ctx context.Context, in *CreateBrandReq, opts ...grpc.CallOption) (*CreateBrandRsp, error) {
	out := new(CreateBrandRsp)
	err := c.cc.Invoke(ctx, "/admin.Admin/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateBrand(ctx context.Context, in *UpdateBrandReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, "/admin.Admin/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBrandByID(ctx context.Context, in *GetBrandByIDReq, opts ...grpc.CallOption) (*GetBrandByIDRsp, error) {
	out := new(GetBrandByIDRsp)
	err := c.cc.Invoke(ctx, "/admin.Admin/GetBrandByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MultiGetBrand(ctx context.Context, in *MultiGetBrandReq, opts ...grpc.CallOption) (*MultiGetBrandRsp, error) {
	out := new(MultiGetBrandRsp)
	err := c.cc.Invoke(ctx, "/admin.Admin/MultiGetBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RemoveBrand(ctx context.Context, in *RemoveBrandReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, "/admin.Admin/RemoveBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// 创建发行方商品.
	CreateBrand(context.Context, *CreateBrandReq) (*CreateBrandRsp, error)
	// 编辑发行方商品.
	UpdateBrand(context.Context, *UpdateBrandReq) (*CommonRsp, error)
	// 基于发行方商品ID查询发行方商品详情.
	GetBrandByID(context.Context, *GetBrandByIDReq) (*GetBrandByIDRsp, error)
	// 批量查询发行方商品数据.
	MultiGetBrand(context.Context, *MultiGetBrandReq) (*MultiGetBrandRsp, error)
	// 删除发行方商品.
	RemoveBrand(context.Context, *RemoveBrandReq) (*CommonRsp, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) CreateBrand(context.Context, *CreateBrandReq) (*CreateBrandRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedAdminServer) UpdateBrand(context.Context, *UpdateBrandReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedAdminServer) GetBrandByID(context.Context, *GetBrandByIDReq) (*GetBrandByIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandByID not implemented")
}
func (UnimplementedAdminServer) MultiGetBrand(context.Context, *MultiGetBrandReq) (*MultiGetBrandRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetBrand not implemented")
}
func (UnimplementedAdminServer) RemoveBrand(context.Context, *RemoveBrandReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBrand not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateBrand(ctx, req.(*CreateBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateBrand(ctx, req.(*UpdateBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetBrandByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetBrandByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetBrandByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetBrandByID(ctx, req.(*GetBrandByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MultiGetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MultiGetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/MultiGetBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MultiGetBrand(ctx, req.(*MultiGetBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RemoveBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RemoveBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/RemoveBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RemoveBrand(ctx, req.(*RemoveBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBrand",
			Handler:    _Admin_CreateBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _Admin_UpdateBrand_Handler,
		},
		{
			MethodName: "GetBrandByID",
			Handler:    _Admin_GetBrandByID_Handler,
		},
		{
			MethodName: "MultiGetBrand",
			Handler:    _Admin_MultiGetBrand_Handler,
		},
		{
			MethodName: "RemoveBrand",
			Handler:    _Admin_RemoveBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin/admin.proto",
}
