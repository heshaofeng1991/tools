// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v1.0.4
// - protoc             v3.21.1
// source: proto/admin/admin.proto

package admin

import (
	context "context"

	gin "github.com/gin-gonic/gin"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)

const _ = gin.Version

// 这里定义 handler interface
type AdminHTTPHandler interface {
	CreateBrand(context.Context, *CreateBrandReq) (*CreateBrandRsp, error)
	UpdateBrand(context.Context, *UpdateBrandReq) (*CommonRsp, error)
	GetBrandByID(context.Context, *GetBrandByIDReq) (*GetBrandByIDRsp, error)
	MultiGetBrand(context.Context, *MultiGetBrandReq) (*MultiGetBrandRsp, error)
	RemoveBrand(context.Context, *RemoveBrandReq) (*CommonRsp, error)
}

// RegisterAdminHTTPHandler define http router handle by gin.
// 注册路由 handler
func RegisterAdminHTTPHandler(g *gin.RouterGroup, srv AdminHTTPHandler) {
	g.POST("/v1/admin/brand_manager/create", _Admin_CreateBrand0_HTTP_Handler(srv))
	g.POST("/v1/admin/brand_manager/edit", _Admin_UpdateBrand0_HTTP_Handler(srv))
	g.GET("/v1/admin/brand_manager/get/{brand_id}", _Admin_GetBrandByID0_HTTP_Handler(srv))
	g.GET("/v1/admin/brand_manager/bulk_get", _Admin_MultiGetBrand0_HTTP_Handler(srv))
	g.POST("/v1/admin/brand_manager/remove", _Admin_RemoveBrand0_HTTP_Handler(srv))
}

// 定义 handler
// 遍历之前解析到所有 rpc 方法信息

func _Admin_CreateBrand0_HTTP_Handler(srv AdminHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(CreateBrandReq)
			out = new(CreateBrandRsp)
			ctx = context.TODO()
		)
		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(400, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.CreateBrand(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(500, gin.H{"err": err.Error()})
			return
		}

		c.JSON(200, out)
	}
}

func _Admin_UpdateBrand0_HTTP_Handler(srv AdminHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(UpdateBrandReq)
			out = new(CommonRsp)
			ctx = context.TODO()
		)
		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(400, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.UpdateBrand(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(500, gin.H{"err": err.Error()})
			return
		}

		c.JSON(200, out)
	}
}

func _Admin_GetBrandByID0_HTTP_Handler(srv AdminHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetBrandByIDReq)
			out = new(GetBrandByIDRsp)
			ctx = context.TODO()
		)
		if err = c.ShouldBindQuery(in); err != nil {
			c.AbortWithStatusJSON(400, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetBrandByID(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(500, gin.H{"err": err.Error()})
			return
		}

		c.JSON(200, out)
	}
}

func _Admin_MultiGetBrand0_HTTP_Handler(srv AdminHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(MultiGetBrandReq)
			out = new(MultiGetBrandRsp)
			ctx = context.TODO()
		)
		if err = c.ShouldBindQuery(in); err != nil {
			c.AbortWithStatusJSON(400, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.MultiGetBrand(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(500, gin.H{"err": err.Error()})
			return
		}

		c.JSON(200, out)
	}
}

func _Admin_RemoveBrand0_HTTP_Handler(srv AdminHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(RemoveBrandReq)
			out = new(CommonRsp)
			ctx = context.TODO()
		)
		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(400, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.RemoveBrand(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(500, gin.H{"err": err.Error()})
			return
		}

		c.JSON(200, out)
	}
}

// Client defines call remote server client and implement selector
type Client interface {
	Call(ctx context.Context, req, rsp interface{}) error
}

// AdminHTTPClient defines call AdminServer client
type AdminHTTPClient interface {
	CreateBrand(context.Context, *CreateBrandReq) (*CreateBrandRsp, error)
	UpdateBrand(context.Context, *UpdateBrandReq) (*CommonRsp, error)
	GetBrandByID(context.Context, *GetBrandByIDReq) (*GetBrandByIDRsp, error)
	MultiGetBrand(context.Context, *MultiGetBrandReq) (*MultiGetBrandRsp, error)
	RemoveBrand(context.Context, *RemoveBrandReq) (*CommonRsp, error)
}

// AdminHTTPClientImpl implement AdminHTTPClient
type AdminHTTPClientImpl struct {
	cli Client
}

func NewAdminHTTPClient(cli Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{
		cli: cli,
	}
}

func (c *AdminHTTPClientImpl) CreateBrand(ctx context.Context, req *CreateBrandReq) (resp *CreateBrandRsp, err error) {
	resp = new(CreateBrandRsp)
	err = c.cli.Call(ctx, req, resp)

	return
}

func (c *AdminHTTPClientImpl) UpdateBrand(ctx context.Context, req *UpdateBrandReq) (resp *CommonRsp, err error) {
	resp = new(CommonRsp)
	err = c.cli.Call(ctx, req, resp)

	return
}

func (c *AdminHTTPClientImpl) GetBrandByID(ctx context.Context, req *GetBrandByIDReq) (resp *GetBrandByIDRsp, err error) {
	resp = new(GetBrandByIDRsp)
	err = c.cli.Call(ctx, req, resp)

	return
}

func (c *AdminHTTPClientImpl) MultiGetBrand(ctx context.Context, req *MultiGetBrandReq) (resp *MultiGetBrandRsp, err error) {
	resp = new(MultiGetBrandRsp)
	err = c.cli.Call(ctx, req, resp)

	return
}

func (c *AdminHTTPClientImpl) RemoveBrand(ctx context.Context, req *RemoveBrandReq) (resp *CommonRsp, err error) {
	resp = new(CommonRsp)
	err = c.cli.Call(ctx, req, resp)

	return
}
