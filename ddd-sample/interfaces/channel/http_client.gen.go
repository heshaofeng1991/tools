// Package interfaces provides primitives to interact with the openapi HTTP API.
//
// Code generated by  version  DO NOT EDIT.
package interfaces

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post request with any body
	PostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttributes request
	GetAttributes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAttributes request with any body
	PostAttributesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAttributes(ctx context.Context, body PostAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAttributes request with any body
	PutAttributesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAttributes(ctx context.Context, body PutAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCosts request with any body
	PutCostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCosts(ctx context.Context, body PutCostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCostsDownloadTemplatesTemplateName request
	GetCostsDownloadTemplatesTemplateName(ctx context.Context, templateName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCostsChannelCostBatchIdUpload request with any body
	PostCostsChannelCostBatchIdUploadWithBody(ctx context.Context, channelCostBatchId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomerConfigs request
	GetCustomerConfigs(ctx context.Context, params *GetCustomerConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerConfigs request with any body
	PostCustomerConfigsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomerConfigs(ctx context.Context, body PostCustomerConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomerConfigs request with any body
	PutCustomerConfigsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomerConfigs(ctx context.Context, body PutCustomerConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecommends request
	GetRecommends(ctx context.Context, params *GetRecommendsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannelIdCostBatches request
	GetChannelIdCostBatches(ctx context.Context, channelId int64, params *GetChannelIdCostBatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChannelIdCostBatches request with any body
	PostChannelIdCostBatchesWithBody(ctx context.Context, channelId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChannelIdCostBatches(ctx context.Context, channelId int64, body PostChannelIdCostBatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChannelIdCostBatchesId request with any body
	PutChannelIdCostBatchesIdWithBody(ctx context.Context, channelId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChannelIdCostBatchesId(ctx context.Context, channelId int64, id int64, body PutChannelIdCostBatchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannelIdCostsChannelCostBatchId request
	GetChannelIdCostsChannelCostBatchId(ctx context.Context, channelId int64, channelCostBatchId int64, params *GetChannelIdCostsChannelCostBatchIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutId request with any body
	PutIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutId(ctx context.Context, id int64, body PutIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdRecommends request with any body
	PostIdRecommendsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdRecommends(ctx context.Context, id int64, body PostIdRecommendsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdRecommends request with any body
	PutIdRecommendsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdRecommends(ctx context.Context, id int64, body PutIdRecommendsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttributes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttributesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttributesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttributesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttributes(ctx context.Context, body PostAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttributesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAttributesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAttributesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAttributes(ctx context.Context, body PutAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAttributesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCostsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCosts(ctx context.Context, body PutCostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCostsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCostsDownloadTemplatesTemplateName(ctx context.Context, templateName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCostsDownloadTemplatesTemplateNameRequest(c.Server, templateName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCostsChannelCostBatchIdUploadWithBody(ctx context.Context, channelCostBatchId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCostsChannelCostBatchIdUploadRequestWithBody(c.Server, channelCostBatchId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerConfigs(ctx context.Context, params *GetCustomerConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerConfigsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerConfigsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerConfigs(ctx context.Context, body PostCustomerConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerConfigsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerConfigsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerConfigsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerConfigs(ctx context.Context, body PutCustomerConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerConfigsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecommends(ctx context.Context, params *GetRecommendsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecommendsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelIdCostBatches(ctx context.Context, channelId int64, params *GetChannelIdCostBatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelIdCostBatchesRequest(c.Server, channelId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelIdCostBatchesWithBody(ctx context.Context, channelId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelIdCostBatchesRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelIdCostBatches(ctx context.Context, channelId int64, body PostChannelIdCostBatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelIdCostBatchesRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChannelIdCostBatchesIdWithBody(ctx context.Context, channelId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChannelIdCostBatchesIdRequestWithBody(c.Server, channelId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChannelIdCostBatchesId(ctx context.Context, channelId int64, id int64, body PutChannelIdCostBatchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChannelIdCostBatchesIdRequest(c.Server, channelId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelIdCostsChannelCostBatchId(ctx context.Context, channelId int64, channelCostBatchId int64, params *GetChannelIdCostsChannelCostBatchIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelIdCostsChannelCostBatchIdRequest(c.Server, channelId, channelCostBatchId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutId(ctx context.Context, id int64, body PutIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdRecommendsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdRecommendsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdRecommends(ctx context.Context, id int64, body PostIdRecommendsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdRecommendsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdRecommendsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdRecommendsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdRecommends(ctx context.Context, id int64, body PutIdRecommendsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdRecommendsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string, params *GetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ChannelPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_platform", runtime.ParamLocationQuery, *params.ChannelPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChannelCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_code", runtime.ParamLocationQuery, *params.ChannelCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChannelName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_name", runtime.ParamLocationQuery, *params.ChannelName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorter", runtime.ParamLocationQuery, *params.Sorter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Current != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "current", runtime.ParamLocationQuery, *params.Current); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRequest calls the generic Post builder with application/json body
func NewPostRequest(server string, body PostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRequestWithBody generates requests for Post with any type of body
func NewPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAttributesRequest generates requests for GetAttributes
func NewGetAttributesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAttributesRequest calls the generic PostAttributes builder with application/json body
func NewPostAttributesRequest(server string, body PostAttributesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAttributesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAttributesRequestWithBody generates requests for PostAttributes with any type of body
func NewPostAttributesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAttributesRequest calls the generic PutAttributes builder with application/json body
func NewPutAttributesRequest(server string, body PutAttributesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAttributesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAttributesRequestWithBody generates requests for PutAttributes with any type of body
func NewPutAttributesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCostsRequest calls the generic PutCosts builder with application/json body
func NewPutCostsRequest(server string, body PutCostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCostsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCostsRequestWithBody generates requests for PutCosts with any type of body
func NewPutCostsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/costs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCostsDownloadTemplatesTemplateNameRequest generates requests for GetCostsDownloadTemplatesTemplateName
func NewGetCostsDownloadTemplatesTemplateNameRequest(server string, templateName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "template_name", runtime.ParamLocationPath, templateName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/costs/download-templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCostsChannelCostBatchIdUploadRequestWithBody generates requests for PostCostsChannelCostBatchIdUpload with any type of body
func NewPostCostsChannelCostBatchIdUploadRequestWithBody(server string, channelCostBatchId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_cost_batch_id", runtime.ParamLocationPath, channelCostBatchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/costs/%s/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomerConfigsRequest generates requests for GetCustomerConfigs
func NewGetCustomerConfigsRequest(server string, params *GetCustomerConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ChannelId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorter", runtime.ParamLocationQuery, *params.Sorter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Current != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "current", runtime.ParamLocationQuery, *params.Current); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCustomerConfigsRequest calls the generic PostCustomerConfigs builder with application/json body
func NewPostCustomerConfigsRequest(server string, body PostCustomerConfigsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerConfigsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCustomerConfigsRequestWithBody generates requests for PostCustomerConfigs with any type of body
func NewPostCustomerConfigsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCustomerConfigsRequest calls the generic PutCustomerConfigs builder with application/json body
func NewPutCustomerConfigsRequest(server string, body PutCustomerConfigsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomerConfigsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCustomerConfigsRequestWithBody generates requests for PutCustomerConfigs with any type of body
func NewPutCustomerConfigsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecommendsRequest generates requests for GetRecommends
func NewGetRecommendsRequest(server string, params *GetRecommendsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recommends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CountryCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country_code", runtime.ParamLocationQuery, *params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChannelId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsRecommended != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_recommended", runtime.ParamLocationQuery, *params.IsRecommended); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Current != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "current", runtime.ParamLocationQuery, *params.Current); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorter", runtime.ParamLocationQuery, *params.Sorter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelIdCostBatchesRequest generates requests for GetChannelIdCostBatches
func NewGetChannelIdCostBatchesRequest(server string, channelId int64, params *GetChannelIdCostBatchesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/cost-batches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EffectiveDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "effective_date", runtime.ParamLocationQuery, *params.EffectiveDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorter", runtime.ParamLocationQuery, *params.Sorter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Current != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "current", runtime.ParamLocationQuery, *params.Current); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChannelIdCostBatchesRequest calls the generic PostChannelIdCostBatches builder with application/json body
func NewPostChannelIdCostBatchesRequest(server string, channelId int64, body PostChannelIdCostBatchesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChannelIdCostBatchesRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPostChannelIdCostBatchesRequestWithBody generates requests for PostChannelIdCostBatches with any type of body
func NewPostChannelIdCostBatchesRequestWithBody(server string, channelId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/cost-batches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutChannelIdCostBatchesIdRequest calls the generic PutChannelIdCostBatchesId builder with application/json body
func NewPutChannelIdCostBatchesIdRequest(server string, channelId int64, id int64, body PutChannelIdCostBatchesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChannelIdCostBatchesIdRequestWithBody(server, channelId, id, "application/json", bodyReader)
}

// NewPutChannelIdCostBatchesIdRequestWithBody generates requests for PutChannelIdCostBatchesId with any type of body
func NewPutChannelIdCostBatchesIdRequestWithBody(server string, channelId int64, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/cost-batches/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChannelIdCostsChannelCostBatchIdRequest generates requests for GetChannelIdCostsChannelCostBatchId
func NewGetChannelIdCostsChannelCostBatchIdRequest(server string, channelId int64, channelCostBatchId int64, params *GetChannelIdCostsChannelCostBatchIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_cost_batch_id", runtime.ParamLocationPath, channelCostBatchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/costs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CountryCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country_code", runtime.ParamLocationQuery, *params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorter", runtime.ParamLocationQuery, *params.Sorter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Current != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "current", runtime.ParamLocationQuery, *params.Current); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdRequest calls the generic PutId builder with application/json body
func NewPutIdRequest(server string, id int64, body PutIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdRequestWithBody generates requests for PutId with any type of body
func NewPutIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIdRecommendsRequest calls the generic PostIdRecommends builder with application/json body
func NewPostIdRecommendsRequest(server string, id int64, body PostIdRecommendsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdRecommendsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostIdRecommendsRequestWithBody generates requests for PostIdRecommends with any type of body
func NewPostIdRecommendsRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/recommends", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutIdRecommendsRequest calls the generic PutIdRecommends builder with application/json body
func NewPutIdRecommendsRequest(server string, id int64, body PutIdRecommendsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdRecommendsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdRecommendsRequestWithBody generates requests for PutIdRecommends with any type of body
func NewPutIdRecommendsRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/recommends", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// Post request with any body
	PostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResponse, error)

	PostWithResponse(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResponse, error)

	// GetAttributes request
	GetAttributesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAttributesResponse, error)

	// PostAttributes request with any body
	PostAttributesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttributesResponse, error)

	PostAttributesWithResponse(ctx context.Context, body PostAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAttributesResponse, error)

	// PutAttributes request with any body
	PutAttributesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAttributesResponse, error)

	PutAttributesWithResponse(ctx context.Context, body PutAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAttributesResponse, error)

	// PutCosts request with any body
	PutCostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCostsResponse, error)

	PutCostsWithResponse(ctx context.Context, body PutCostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCostsResponse, error)

	// GetCostsDownloadTemplatesTemplateName request
	GetCostsDownloadTemplatesTemplateNameWithResponse(ctx context.Context, templateName string, reqEditors ...RequestEditorFn) (*GetCostsDownloadTemplatesTemplateNameResponse, error)

	// PostCostsChannelCostBatchIdUpload request with any body
	PostCostsChannelCostBatchIdUploadWithBodyWithResponse(ctx context.Context, channelCostBatchId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCostsChannelCostBatchIdUploadResponse, error)

	// GetCustomerConfigs request
	GetCustomerConfigsWithResponse(ctx context.Context, params *GetCustomerConfigsParams, reqEditors ...RequestEditorFn) (*GetCustomerConfigsResponse, error)

	// PostCustomerConfigs request with any body
	PostCustomerConfigsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerConfigsResponse, error)

	PostCustomerConfigsWithResponse(ctx context.Context, body PostCustomerConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerConfigsResponse, error)

	// PutCustomerConfigs request with any body
	PutCustomerConfigsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerConfigsResponse, error)

	PutCustomerConfigsWithResponse(ctx context.Context, body PutCustomerConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerConfigsResponse, error)

	// GetRecommends request
	GetRecommendsWithResponse(ctx context.Context, params *GetRecommendsParams, reqEditors ...RequestEditorFn) (*GetRecommendsResponse, error)

	// GetChannelIdCostBatches request
	GetChannelIdCostBatchesWithResponse(ctx context.Context, channelId int64, params *GetChannelIdCostBatchesParams, reqEditors ...RequestEditorFn) (*GetChannelIdCostBatchesResponse, error)

	// PostChannelIdCostBatches request with any body
	PostChannelIdCostBatchesWithBodyWithResponse(ctx context.Context, channelId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelIdCostBatchesResponse, error)

	PostChannelIdCostBatchesWithResponse(ctx context.Context, channelId int64, body PostChannelIdCostBatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelIdCostBatchesResponse, error)

	// PutChannelIdCostBatchesId request with any body
	PutChannelIdCostBatchesIdWithBodyWithResponse(ctx context.Context, channelId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChannelIdCostBatchesIdResponse, error)

	PutChannelIdCostBatchesIdWithResponse(ctx context.Context, channelId int64, id int64, body PutChannelIdCostBatchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChannelIdCostBatchesIdResponse, error)

	// GetChannelIdCostsChannelCostBatchId request
	GetChannelIdCostsChannelCostBatchIdWithResponse(ctx context.Context, channelId int64, channelCostBatchId int64, params *GetChannelIdCostsChannelCostBatchIdParams, reqEditors ...RequestEditorFn) (*GetChannelIdCostsChannelCostBatchIdResponse, error)

	// PutId request with any body
	PutIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdResponse, error)

	PutIdWithResponse(ctx context.Context, id int64, body PutIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdResponse, error)

	// PostIdRecommends request with any body
	PostIdRecommendsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdRecommendsResponse, error)

	PostIdRecommendsWithResponse(ctx context.Context, id int64, body PostIdRecommendsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdRecommendsResponse, error)

	// PutIdRecommends request with any body
	PutIdRecommendsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdRecommendsResponse, error)

	PutIdRecommendsWithResponse(ctx context.Context, id int64, body PutIdRecommendsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdRecommendsResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelSearchRsp
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateChannelRsp
}

// Status returns HTTPResponse.Status
func (r PostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryAttributeRsp
}

// Status returns HTTPResponse.Status
func (r GetAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateAttributeRsp
}

// Status returns HTTPResponse.Status
func (r PostAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateAttributeRsp
}

// Status returns HTTPResponse.Status
func (r PutAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateChannelCostStatusRsp
}

// Status returns HTTPResponse.Status
func (r PutCostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCostsDownloadTemplatesTemplateNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCostsDownloadTemplatesTemplateNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCostsDownloadTemplatesTemplateNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCostsChannelCostBatchIdUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadChannelCostRsp
}

// Status returns HTTPResponse.Status
func (r PostCostsChannelCostBatchIdUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCostsChannelCostBatchIdUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryCustomerConfigRsp
}

// Status returns HTTPResponse.Status
func (r GetCustomerConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCustomerConfigRsp
}

// Status returns HTTPResponse.Status
func (r PostCustomerConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomerConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCustomerConfigRsp
}

// Status returns HTTPResponse.Status
func (r PutCustomerConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomerConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecommendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryRecommendRsp
}

// Status returns HTTPResponse.Status
func (r GetRecommendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecommendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelIdCostBatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelCostBatchSearchRsp
}

// Status returns HTTPResponse.Status
func (r GetChannelIdCostBatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelIdCostBatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChannelIdCostBatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateChannelCostBatchRsp
}

// Status returns HTTPResponse.Status
func (r PostChannelIdCostBatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChannelIdCostBatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChannelIdCostBatchesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateChannelCostBatchRsp
}

// Status returns HTTPResponse.Status
func (r PutChannelIdCostBatchesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChannelIdCostBatchesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelIdCostsChannelCostBatchIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelCostSearchRsp
}

// Status returns HTTPResponse.Status
func (r GetChannelIdCostsChannelCostBatchIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelIdCostsChannelCostBatchIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateChannelRsp
}

// Status returns HTTPResponse.Status
func (r PutIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdRecommendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateRecommendRsp
}

// Status returns HTTPResponse.Status
func (r PostIdRecommendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdRecommendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdRecommendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateRecommendRsp
}

// Status returns HTTPResponse.Status
func (r PutIdRecommendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdRecommendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PostWithBodyWithResponse request with arbitrary body returning *PostResponse
func (c *ClientWithResponses) PostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.PostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

func (c *ClientWithResponses) PostWithResponse(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.Post(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

// GetAttributesWithResponse request returning *GetAttributesResponse
func (c *ClientWithResponses) GetAttributesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAttributesResponse, error) {
	rsp, err := c.GetAttributes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttributesResponse(rsp)
}

// PostAttributesWithBodyWithResponse request with arbitrary body returning *PostAttributesResponse
func (c *ClientWithResponses) PostAttributesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttributesResponse, error) {
	rsp, err := c.PostAttributesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttributesResponse(rsp)
}

func (c *ClientWithResponses) PostAttributesWithResponse(ctx context.Context, body PostAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAttributesResponse, error) {
	rsp, err := c.PostAttributes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttributesResponse(rsp)
}

// PutAttributesWithBodyWithResponse request with arbitrary body returning *PutAttributesResponse
func (c *ClientWithResponses) PutAttributesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAttributesResponse, error) {
	rsp, err := c.PutAttributesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAttributesResponse(rsp)
}

func (c *ClientWithResponses) PutAttributesWithResponse(ctx context.Context, body PutAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAttributesResponse, error) {
	rsp, err := c.PutAttributes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAttributesResponse(rsp)
}

// PutCostsWithBodyWithResponse request with arbitrary body returning *PutCostsResponse
func (c *ClientWithResponses) PutCostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCostsResponse, error) {
	rsp, err := c.PutCostsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCostsResponse(rsp)
}

func (c *ClientWithResponses) PutCostsWithResponse(ctx context.Context, body PutCostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCostsResponse, error) {
	rsp, err := c.PutCosts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCostsResponse(rsp)
}

// GetCostsDownloadTemplatesTemplateNameWithResponse request returning *GetCostsDownloadTemplatesTemplateNameResponse
func (c *ClientWithResponses) GetCostsDownloadTemplatesTemplateNameWithResponse(ctx context.Context, templateName string, reqEditors ...RequestEditorFn) (*GetCostsDownloadTemplatesTemplateNameResponse, error) {
	rsp, err := c.GetCostsDownloadTemplatesTemplateName(ctx, templateName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCostsDownloadTemplatesTemplateNameResponse(rsp)
}

// PostCostsChannelCostBatchIdUploadWithBodyWithResponse request with arbitrary body returning *PostCostsChannelCostBatchIdUploadResponse
func (c *ClientWithResponses) PostCostsChannelCostBatchIdUploadWithBodyWithResponse(ctx context.Context, channelCostBatchId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCostsChannelCostBatchIdUploadResponse, error) {
	rsp, err := c.PostCostsChannelCostBatchIdUploadWithBody(ctx, channelCostBatchId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCostsChannelCostBatchIdUploadResponse(rsp)
}

// GetCustomerConfigsWithResponse request returning *GetCustomerConfigsResponse
func (c *ClientWithResponses) GetCustomerConfigsWithResponse(ctx context.Context, params *GetCustomerConfigsParams, reqEditors ...RequestEditorFn) (*GetCustomerConfigsResponse, error) {
	rsp, err := c.GetCustomerConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerConfigsResponse(rsp)
}

// PostCustomerConfigsWithBodyWithResponse request with arbitrary body returning *PostCustomerConfigsResponse
func (c *ClientWithResponses) PostCustomerConfigsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerConfigsResponse, error) {
	rsp, err := c.PostCustomerConfigsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerConfigsResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerConfigsWithResponse(ctx context.Context, body PostCustomerConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerConfigsResponse, error) {
	rsp, err := c.PostCustomerConfigs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerConfigsResponse(rsp)
}

// PutCustomerConfigsWithBodyWithResponse request with arbitrary body returning *PutCustomerConfigsResponse
func (c *ClientWithResponses) PutCustomerConfigsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerConfigsResponse, error) {
	rsp, err := c.PutCustomerConfigsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerConfigsResponse(rsp)
}

func (c *ClientWithResponses) PutCustomerConfigsWithResponse(ctx context.Context, body PutCustomerConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerConfigsResponse, error) {
	rsp, err := c.PutCustomerConfigs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerConfigsResponse(rsp)
}

// GetRecommendsWithResponse request returning *GetRecommendsResponse
func (c *ClientWithResponses) GetRecommendsWithResponse(ctx context.Context, params *GetRecommendsParams, reqEditors ...RequestEditorFn) (*GetRecommendsResponse, error) {
	rsp, err := c.GetRecommends(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecommendsResponse(rsp)
}

// GetChannelIdCostBatchesWithResponse request returning *GetChannelIdCostBatchesResponse
func (c *ClientWithResponses) GetChannelIdCostBatchesWithResponse(ctx context.Context, channelId int64, params *GetChannelIdCostBatchesParams, reqEditors ...RequestEditorFn) (*GetChannelIdCostBatchesResponse, error) {
	rsp, err := c.GetChannelIdCostBatches(ctx, channelId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelIdCostBatchesResponse(rsp)
}

// PostChannelIdCostBatchesWithBodyWithResponse request with arbitrary body returning *PostChannelIdCostBatchesResponse
func (c *ClientWithResponses) PostChannelIdCostBatchesWithBodyWithResponse(ctx context.Context, channelId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelIdCostBatchesResponse, error) {
	rsp, err := c.PostChannelIdCostBatchesWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelIdCostBatchesResponse(rsp)
}

func (c *ClientWithResponses) PostChannelIdCostBatchesWithResponse(ctx context.Context, channelId int64, body PostChannelIdCostBatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelIdCostBatchesResponse, error) {
	rsp, err := c.PostChannelIdCostBatches(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelIdCostBatchesResponse(rsp)
}

// PutChannelIdCostBatchesIdWithBodyWithResponse request with arbitrary body returning *PutChannelIdCostBatchesIdResponse
func (c *ClientWithResponses) PutChannelIdCostBatchesIdWithBodyWithResponse(ctx context.Context, channelId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChannelIdCostBatchesIdResponse, error) {
	rsp, err := c.PutChannelIdCostBatchesIdWithBody(ctx, channelId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChannelIdCostBatchesIdResponse(rsp)
}

func (c *ClientWithResponses) PutChannelIdCostBatchesIdWithResponse(ctx context.Context, channelId int64, id int64, body PutChannelIdCostBatchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChannelIdCostBatchesIdResponse, error) {
	rsp, err := c.PutChannelIdCostBatchesId(ctx, channelId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChannelIdCostBatchesIdResponse(rsp)
}

// GetChannelIdCostsChannelCostBatchIdWithResponse request returning *GetChannelIdCostsChannelCostBatchIdResponse
func (c *ClientWithResponses) GetChannelIdCostsChannelCostBatchIdWithResponse(ctx context.Context, channelId int64, channelCostBatchId int64, params *GetChannelIdCostsChannelCostBatchIdParams, reqEditors ...RequestEditorFn) (*GetChannelIdCostsChannelCostBatchIdResponse, error) {
	rsp, err := c.GetChannelIdCostsChannelCostBatchId(ctx, channelId, channelCostBatchId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelIdCostsChannelCostBatchIdResponse(rsp)
}

// PutIdWithBodyWithResponse request with arbitrary body returning *PutIdResponse
func (c *ClientWithResponses) PutIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdResponse, error) {
	rsp, err := c.PutIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdWithResponse(ctx context.Context, id int64, body PutIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdResponse, error) {
	rsp, err := c.PutId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdResponse(rsp)
}

// PostIdRecommendsWithBodyWithResponse request with arbitrary body returning *PostIdRecommendsResponse
func (c *ClientWithResponses) PostIdRecommendsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdRecommendsResponse, error) {
	rsp, err := c.PostIdRecommendsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdRecommendsResponse(rsp)
}

func (c *ClientWithResponses) PostIdRecommendsWithResponse(ctx context.Context, id int64, body PostIdRecommendsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdRecommendsResponse, error) {
	rsp, err := c.PostIdRecommends(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdRecommendsResponse(rsp)
}

// PutIdRecommendsWithBodyWithResponse request with arbitrary body returning *PutIdRecommendsResponse
func (c *ClientWithResponses) PutIdRecommendsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdRecommendsResponse, error) {
	rsp, err := c.PutIdRecommendsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdRecommendsResponse(rsp)
}

func (c *ClientWithResponses) PutIdRecommendsWithResponse(ctx context.Context, id int64, body PutIdRecommendsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdRecommendsResponse, error) {
	rsp, err := c.PutIdRecommends(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdRecommendsResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelSearchRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostResponse parses an HTTP response from a PostWithResponse call
func ParsePostResponse(rsp *http.Response) (*PostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateChannelRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAttributesResponse parses an HTTP response from a GetAttributesWithResponse call
func ParseGetAttributesResponse(rsp *http.Response) (*GetAttributesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryAttributeRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAttributesResponse parses an HTTP response from a PostAttributesWithResponse call
func ParsePostAttributesResponse(rsp *http.Response) (*PostAttributesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateAttributeRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAttributesResponse parses an HTTP response from a PutAttributesWithResponse call
func ParsePutAttributesResponse(rsp *http.Response) (*PutAttributesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateAttributeRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCostsResponse parses an HTTP response from a PutCostsWithResponse call
func ParsePutCostsResponse(rsp *http.Response) (*PutCostsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateChannelCostStatusRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCostsDownloadTemplatesTemplateNameResponse parses an HTTP response from a GetCostsDownloadTemplatesTemplateNameWithResponse call
func ParseGetCostsDownloadTemplatesTemplateNameResponse(rsp *http.Response) (*GetCostsDownloadTemplatesTemplateNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCostsDownloadTemplatesTemplateNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCostsChannelCostBatchIdUploadResponse parses an HTTP response from a PostCostsChannelCostBatchIdUploadWithResponse call
func ParsePostCostsChannelCostBatchIdUploadResponse(rsp *http.Response) (*PostCostsChannelCostBatchIdUploadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCostsChannelCostBatchIdUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadChannelCostRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomerConfigsResponse parses an HTTP response from a GetCustomerConfigsWithResponse call
func ParseGetCustomerConfigsResponse(rsp *http.Response) (*GetCustomerConfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryCustomerConfigRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomerConfigsResponse parses an HTTP response from a PostCustomerConfigsWithResponse call
func ParsePostCustomerConfigsResponse(rsp *http.Response) (*PostCustomerConfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCustomerConfigRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomerConfigsResponse parses an HTTP response from a PutCustomerConfigsWithResponse call
func ParsePutCustomerConfigsResponse(rsp *http.Response) (*PutCustomerConfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomerConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCustomerConfigRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecommendsResponse parses an HTTP response from a GetRecommendsWithResponse call
func ParseGetRecommendsResponse(rsp *http.Response) (*GetRecommendsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecommendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryRecommendRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelIdCostBatchesResponse parses an HTTP response from a GetChannelIdCostBatchesWithResponse call
func ParseGetChannelIdCostBatchesResponse(rsp *http.Response) (*GetChannelIdCostBatchesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelIdCostBatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelCostBatchSearchRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChannelIdCostBatchesResponse parses an HTTP response from a PostChannelIdCostBatchesWithResponse call
func ParsePostChannelIdCostBatchesResponse(rsp *http.Response) (*PostChannelIdCostBatchesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChannelIdCostBatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateChannelCostBatchRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChannelIdCostBatchesIdResponse parses an HTTP response from a PutChannelIdCostBatchesIdWithResponse call
func ParsePutChannelIdCostBatchesIdResponse(rsp *http.Response) (*PutChannelIdCostBatchesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChannelIdCostBatchesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateChannelCostBatchRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelIdCostsChannelCostBatchIdResponse parses an HTTP response from a GetChannelIdCostsChannelCostBatchIdWithResponse call
func ParseGetChannelIdCostsChannelCostBatchIdResponse(rsp *http.Response) (*GetChannelIdCostsChannelCostBatchIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelIdCostsChannelCostBatchIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelCostSearchRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutIdResponse parses an HTTP response from a PutIdWithResponse call
func ParsePutIdResponse(rsp *http.Response) (*PutIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateChannelRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIdRecommendsResponse parses an HTTP response from a PostIdRecommendsWithResponse call
func ParsePostIdRecommendsResponse(rsp *http.Response) (*PostIdRecommendsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIdRecommendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateRecommendRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutIdRecommendsResponse parses an HTTP response from a PutIdRecommendsWithResponse call
func ParsePutIdRecommendsResponse(rsp *http.Response) (*PutIdRecommendsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIdRecommendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateRecommendRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
