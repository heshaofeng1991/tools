// Package interfaces provides primitives to interact with the openapi HTTP API.
//
// Code generated by  version  DO NOT EDIT.
package interfaces

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 运费试算
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request, params GetParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetParams

	// ------------- Required query parameter "origin_country" -------------
	if paramValue := r.URL.Query().Get("origin_country"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "origin_country"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "origin_country", r.URL.Query(), &params.OriginCountry)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "origin_country", Err: err})
		return
	}

	// ------------- Required query parameter "dest_country" -------------
	if paramValue := r.URL.Query().Get("dest_country"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "dest_country"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dest_country", r.URL.Query(), &params.DestCountry)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dest_country", Err: err})
		return
	}

	// ------------- Required query parameter "dest_state" -------------
	if paramValue := r.URL.Query().Get("dest_state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "dest_state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dest_state", r.URL.Query(), &params.DestState)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dest_state", Err: err})
		return
	}

	// ------------- Required query parameter "dest_zip_code" -------------
	if paramValue := r.URL.Query().Get("dest_zip_code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "dest_zip_code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dest_zip_code", r.URL.Query(), &params.DestZipCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dest_zip_code", Err: err})
		return
	}

	// ------------- Required query parameter "weight" -------------
	if paramValue := r.URL.Query().Get("weight"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "weight"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "weight", r.URL.Query(), &params.Weight)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "weight", Err: err})
		return
	}

	// ------------- Required query parameter "length" -------------
	if paramValue := r.URL.Query().Get("length"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "length"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "length", r.URL.Query(), &params.Length)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "length", Err: err})
		return
	}

	// ------------- Required query parameter "width" -------------
	if paramValue := r.URL.Query().Get("width"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "width"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "width", r.URL.Query(), &params.Width)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "width", Err: err})
		return
	}

	// ------------- Required query parameter "height" -------------
	if paramValue := r.URL.Query().Get("height"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "height"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "height", r.URL.Query(), &params.Height)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "height", Err: err})
		return
	}

	// ------------- Optional query parameter "product_attributes" -------------
	if paramValue := r.URL.Query().Get("product_attributes"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "product_attributes", r.URL.Query(), &params.ProductAttributes)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "product_attributes", Err: err})
		return
	}

	// ------------- Optional query parameter "preset_channel_ids" -------------
	if paramValue := r.URL.Query().Get("preset_channel_ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "preset_channel_ids", r.URL.Query(), &params.PresetChannelIds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "preset_channel_ids", Err: err})
		return
	}

	// ------------- Optional query parameter "test_channel_ids" -------------
	if paramValue := r.URL.Query().Get("test_channel_ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "test_channel_ids", r.URL.Query(), &params.TestChannelIds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "test_channel_ids", Err: err})
		return
	}

	// ------------- Optional query parameter "factory" -------------
	if paramValue := r.URL.Query().Get("factory"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "factory", r.URL.Query(), &params.Factory)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "factory", Err: err})
		return
	}

	// ------------- Optional query parameter "date" -------------
	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	// ------------- Optional query parameter "volume" -------------
	if paramValue := r.URL.Query().Get("volume"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "volume", r.URL.Query(), &params.Volume)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "volume", Err: err})
		return
	}

	// ------------- Optional query parameter "declared_value" -------------
	if paramValue := r.URL.Query().Get("declared_value"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "declared_value", r.URL.Query(), &params.DeclaredValue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "declared_value", Err: err})
		return
	}

	// ------------- Optional query parameter "prepay_tariff" -------------
	if paramValue := r.URL.Query().Get("prepay_tariff"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "prepay_tariff", r.URL.Query(), &params.PrepayTariff)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prepay_tariff", Err: err})
		return
	}

	// ------------- Optional query parameter "warehouse_id" -------------
	if paramValue := r.URL.Query().Get("warehouse_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "warehouse_id", r.URL.Query(), &params.WarehouseId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "warehouse_id", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_channel_ids" -------------
	if paramValue := r.URL.Query().Get("exclude_channel_ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude_channel_ids", r.URL.Query(), &params.ExcludeChannelIds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_channel_ids", Err: err})
		return
	}

	// ------------- Optional query parameter "settlement_currency" -------------
	if paramValue := r.URL.Query().Get("settlement_currency"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "settlement_currency", r.URL.Query(), &params.SettlementCurrency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "settlement_currency", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.Get)
	})

	return r
}
